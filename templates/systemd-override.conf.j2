{{ ansible_managed | comment }}
#
# /etc/systemd/system/httpd.service.d/security.conf
#
# exposure level: 9.2 -> 2.1-3.0
[Service]
# Run fully unprivileged
# FIXME! User and NoNewPrivileges seems to prevent LoadModule on Centos-8-Stream
# User={{ www_user }}
# Group={{ www_user }}

# Reduce Attack Surface
{% if ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 20 %}
NoNewPrivileges=yes
{% else %}
# NoNewPrivileges=yes
{% endif %}
PrivateTmp=true
ProtectHome=yes
ProtectSystem=full
# ProtectSystem=strict
{% if ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 21 %}
ProtectProc=noaccess
{% endif %}

PrivateDevices=yes
DeviceAllow=

# PrivateUsers=yes

UMask=077

{% if (ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 7) or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int >= 18) %}
InaccessiblePaths=/proc
ProtectKernelTunables=true
ProtectKernelModules=yes
ProtectControlGroups=true
LockPersonality=true
RestrictRealtime=true
RestrictNamespaces=yes
ProtectKernelLogs=yes
{% endif %}
{% if (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 20) or
      (ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 8 )
%}
RestrictNamespaces=~CLONE_NEWCGROUP CLONE_NEWIPC CLONE_NEWNET CLONE_NEWPID
{% endif %}
RestrictSUIDSGID=yes
# MemoryDenyWriteExecute=yes

# PrivateNetwork=yes
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
RestrictAddressFamilies=~AF_NETLINK AF_PACKET

IPAccounting=yes
# Depending on architecture, apache httpd can or not be exposed directly to Internet
# Ideally behind a reverse-proxy, load balancer or WAF (or all of them)
# And if connecting to Internet, through an internal proxy
IPAddressAllow={{ harden_apache_systemd_ipaddressallow | default('localhost link-local multicast 10.0.0.0/8 192.168.0.0/16') }}

AmbientCapabilities=CAP_NET_BIND_SERVICE

CapabilityBoundingSet=~CAP_AUDIT_CONTROL CAP_AUDIT_READ CAP_DAC_READ_SEARCH
CapabilityBoundingSet=~CAP_SYS_RAWIO
CapabilityBoundingSet=~CAP_SYS_PTRACE
CapabilityBoundingSet=~CAP_DAC_* CAP_FOWNER CAP_IPC_OWNER
CapabilityBoundingSet=~CAP_NET_ADMIN
CapabilityBoundingSet=~CAP_KILL
CapabilityBoundingSet=~CAP_NET_BROADCAST
CapabilityBoundingSet=~CAP_SYS_NICE CAP_SYS_RESOURCE
CapabilityBoundingSet=~CAP_SYS_BOOT
CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE
CapabilityBoundingSet=~CAP_SYS_CHROOT
CapabilityBoundingSet=~CAP_BLOCK_SUSPEND
CapabilityBoundingSet=~CAP_LEASE
CapabilityBoundingSet=~CAP_SYS_PACCT
CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG
CapabilityBoundingSet=~CAP_SYS_ADMIN
# CapabilityBoundingSet=~CAP_SETUID CAP_SETGID
CapabilityBoundingSet=~CAP_SETPCAP
{% if harden_apache_systemd_cap_chown|bool %}
CapabilityBoundingSet=~CAP_CHOWN
{% else %}
# CapabilityBoundingSet=~CAP_CHOWN
{% endif %}
CapabilityBoundingSet=~CAP_FSETID CAP_SETFCAP
CapabilityBoundingSet=~CAP_NET_RAW
CapabilityBoundingSet=~CAP_IPC_LOCK

{% if not (ansible_virtualization_type is defined and
          ansible_virtualization_type == "docker"
        )
%}
{% if (ansible_os_family == 'RedHat' and ansible_distribution_major_version|int >= 8) or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int > 18) %}
SystemCallFilter=@system-service @privileged
{% endif %}
SystemCallFilter=~@debug @mount @cpu-emulation @obsolete @resources @reboot @swap @raw-io @module
{% endif %}
# When system call is disallowed, return error code instead of killing process
SystemCallErrorNumber=EPERM
SystemCallArchitectures=native

CPUWeight={{ apache_cgroups_cpushares | default('1024') }}
CPUQuota={{ apache_cgroups_cpuquota | default('80%') }}
MemoryMax={{ apache_cgroups_memorylimit | default('4G') }}
